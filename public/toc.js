
var svg = '<svg class="toc-marker " width="200 " height="200 " xmlns="http://www.w3.org/1000/svg "><path stroke="#444 " stroke-width="3 " fill="transparent " stroke-dasharray="1, 0, 26, 26" stroke-linecap="round " stroke-linejoin="round " transform="translate(-0.5, -0.5) " d="M 43 16 L 43 42" opacity="1" stroke-dashoffset="1"></path></svg>'; var toc = document.querySelector('.toc'); toc.innerHTML = svg; headers = document.querySelectorAll('h2');
tocList = document.createElement("ul");
console.log(tocList);


// Get the h3 tags - ToC entries 
for (i = 0; i < headers.length; i++) { id_name = headers[i].id; tocListItem = document.createElement("li"); tocEntry = document.createElement("a"); tocEntry.setAttribute("href", "#" + id_name); tocEntry.innerText = id_name; child = headers[i].getElementsByTagName("h2"); tocListItem.appendChild(tocEntry); tocList.appendChild(tocListItem); if (child.length != 0) { for (j = 0; j < child.length; j++) { tocList1 = document.createElement("ul"); tocListItem1 = document.createElement("li"); tocEntry1 = document.createElement("a"); tocEntry1.setAttribute("href", "#" + child[j].id); tocEntry1.innerText = child[j].id; console.log(tocEntry1); tocListItem1.appendChild(tocEntry1); tocList1.appendChild(tocListItem1); tocListItem.appendChild(tocList1); console.log(tocListItem1); } } toc.appendChild(tocList); }

var tocPath = document.querySelector('.toc-marker path');
var tocItems; console.log(tocPath);

var TOP_MARGIN = 0.1;
var BOTTOM_MARGIN = 0.2; 
var pathLength; var lastPathStart, lastPathEnd; 
window.addEventListener('resize', drawPath, false); window.addEventListener('scroll', sync, false); console.log(TOP_MARGIN); 
function drawPath() { console.log("drawpath is called"); tocItems = [].slice.call(toc.querySelectorAll('li')); tocItems = tocItems.map( function( item ) { var anchor = item.querySelector( 'a' ); var target = document.getElementById( anchor.getAttribute( 'href' ).slice( 1 ) ); return { listItem: item, anchor: anchor, target: target }; } ); tocItems = tocItems.filter( function( item ) { return !!item.target; } ); var path = []; var pathIndent; tocItems.forEach( function( item, i ) { var x = item.anchor.offsetLeft - 5, y = item.anchor.offsetTop, height = item.anchor.offsetHeight; if( i === 0 ) { path.push( 'M', x, y, 'L', x, y + height ); item.pathStart = 0; } else { if( pathIndent !== x ) path.push( 'L', pathIndent, y ); path.push( 'L', x, y ); tocPath.setAttribute( 'd', path.join( ' ' ) ); item.pathStart = tocPath.getTotalLength() || 0; path.push( 'L', x, y + height ); } pathIndent = x; tocPath.setAttribute( 'd', path.join( ' ' ) ); item.pathEnd = tocPath.getTotalLength(); } ); pathLength = tocPath.getTotalLength(); sync(); } function sync() { var windowHeight = window.innerHeight; var pathStart = pathLength, pathEnd = 0; var visibleItems = 0; tocItems.forEach( function( item ) { var targetBounds = item.target.getBoundingClientRect(); if( targetBounds.bottom > windowHeight * TOP_MARGIN && targetBounds.top < windowHeight * ( 1 - BOTTOM_MARGIN ) ) { pathStart = Math.min( item.pathStart, pathStart ); pathEnd = Math.max( item.pathEnd, pathEnd ); visibleItems += 1; item.listItem.classList.add( 'visible' ); } else { item.listItem.classList.remove( 'visible' ); } } );  if( visibleItems > 0 && pathStart < pathEnd ) { if( pathStart !== lastPathStart || pathEnd !== lastPathEnd ) { tocPath.setAttribute( 'stroke-dashoffset', '1' ); tocPath.setAttribute( 'stroke-dasharray', '1, '+ pathStart +', '+ ( pathEnd - pathStart ) +', ' + pathLength ); tocPath.setAttribute( 'opacity', 1 ); } } else { tocPath.setAttribute( 'opacity', 0 ); } lastPathStart = pathStart; lastPathEnd = pathEnd; }; drawPath(); 

if tocList.childElementCount == 0 { toc.style.display = "none"; } else { toc.style.display = "block"; }